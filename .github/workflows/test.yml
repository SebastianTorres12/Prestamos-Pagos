name: Pruebas Selenium para Gestión de Préstamos y Pagos

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Ejecutar Pruebas Selenium
    runs-on: ubuntu-latest

    services:
      # Servicio MySQL para pruebas
      mysql:
        image: mysql:8.0.36
        env:
          MYSQL_ROOT_PASSWORD: sebastian
          MYSQL_DATABASE: gestion_prestamos
          TZ: America/Guayaquil
        ports:
          - 3306:3306
        options: --health-cmd "mysqladmin ping -h localhost -u root --password=sebastian || exit 0" --health-interval 10s --health-timeout 5s --health-retries 10 --health-start-period 30s

      # Servicio Backend para pruebas
      backend:
        image: sebast25/gestion-prestamos-backend:latest
        env:
          DB_HOST: mysql
          DB_USERNAME: root
          DB_PASSWORD: sebastian
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
        ports:
          - 8080:8080

      # Servicio Frontend para pruebas
      frontend:
        image: sebast25/gestion-prestamos-frontend:latest
        ports:
          - 80:80

    steps:
      # Clonar el repositorio
      - name: Clonar Repositorio
        uses: actions/checkout@v4

      # Configurar Node.js
      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Instalar dependencias
      - name: Instalar Dependencias
        run: npm install selenium-webdriver geckodriver

      # Instalar herramientas necesarias
      - name: Instalar herramientas
        run: sudo apt-get update && sudo apt-get install -y mysql-client netcat-openbsd

      # Capturar logs de MySQL si falla el healthcheck
      - name: Capturar logs de MySQL si falla
        if: failure()
        run: |
          echo "Capturando logs de MySQL..."
          docker ps -a
          docker logs $(docker ps -a -q --filter "ancestor=mysql:8.0.36") 2>&1

      # Inspeccionar usuarios de MySQL
      - name: Inspeccionar usuarios de MySQL
        run: |
          echo "Esperando a que MySQL esté listo para inspeccionar usuarios..."
          timeout 60s bash -c 'until nc -z 127.0.0.1 3306 >/dev/null 2>&1; do
            echo "Esperando puerto 3306..."
            sleep 5
            docker ps -a
            docker logs $(docker ps -a -q --filter "ancestor=mysql:8.0.36") 2>&1
          done' || { echo "Error: Puerto 3306 no disponible"; exit 1; }
          echo "Intentando conectar con contraseña 'sebastian'..."
          mysql -h 127.0.0.1 -P 3306 -u root -psebastian -e "SELECT User, Host, authentication_string FROM mysql.user" || { echo "Conexión con contraseña fallida"; exit 1; }

      # Esperar a que los servicios estén listos
      - name: Esperar a que los servicios estén listos
        run: |
          # Esperar a que MySQL esté listo (máximo 180 segundos)
          timeout 180s bash -c 'until nc -z 127.0.0.1 3306 >/dev/null 2>&1; do
            echo "Esperando a que MySQL esté listo..."
            sleep 5
            docker ps -a
            docker logs $(docker ps -a -q --filter "ancestor=mysql:8.0.36") 2>&1
          done' || { echo "Error: MySQL no se inició en 180 segundos"; exit 1; }
          # Verificar conexión a MySQL
          timeout 60s bash -c 'until mysqladmin ping -h 127.0.0.1 -P 3306 -u root --password=sebastian >/dev/null 2>&1; do
            echo "Verificando conexión a MySQL..."
            sleep 5
            docker logs $(docker ps -a -q --filter "ancestor=mysql:8.0.36") 2>&1
          done' || { echo "Error: No se pudo conectar a MySQL"; exit 1; }
          # Verificar que el backend está respondiendo
          timeout 30s bash -c 'until curl -s http://backend:8080/actuator/health | grep -q '"status":"UP"'; do
            echo "Esperando a que el backend esté listo..."
            sleep 5
            docker logs $(docker ps -a -q --filter "ancestor=sebast25/gestion-prestamos-backend:latest") 2>&1
          done' || { echo "Error: Backend no se inició en 30 segundos"; exit 1; }
          # Verificar que el frontend está respondiendo
          timeout 30s bash -c 'until curl -s http://frontend:80 | grep -q "<!DOCTYPE html>"; do
            echo "Esperando a que el frontend esté listo..."
            sleep 5
            docker logs $(docker ps -a -q --filter "ancestor=sebast25/gestion-prestamos-frontend:latest") 2>&1
          done' || { echo "Error: Frontend no se inició en 30 segundos"; exit 1; }

      # Ejecutar todas las pruebas Selenium
      - name: Ejecutar Pruebas Selenium
        run: |
          for test_file in pruebas_selenium/*.js; do
            echo "Ejecutando $test_file"
            node "$test_file"
          done
        env:
          BASE_URL: http://frontend:80